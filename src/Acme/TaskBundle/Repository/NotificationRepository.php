<?php

namespace Acme\TaskBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
	public function findByPendingPushNotifications() {
		$now = mktime(date("H"), date("i"), 0, date("m"), date("d"), date("Y"));
		$query = 'SELECT n FROM AcmeTaskBundle:Notification n WHERE n.datetime <= :now AND n.push = 0 ORDER BY n.datetime';
		
		try{
			return $this->getEntityManager()
				->createQuery($query)
				->setParameter('now', $now)
				->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
        return null;
    	}
	}
	public function findOneByIdAndConfirmId($id, $confirmId) {
		$query = 'SELECT n FROM AcmeTaskBundle:Notification n 
		WHERE n.id = :id AND n.callConfirmCode = :confirmId';
		
		try{
			return $this->getEntityManager()
				->createQuery($query)
				->setParameter('id', $id)
				->setParameter('confirmId', $confirmId)
				->getSingleResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
        return null;
    	}
	}
	public function findByPendingSMSNotifications() {
		//tollerence time between push and sms
		$smsTolerence = 5;
		$callTolerence = 10;
		$smsTolerenceTime = mktime(date("H"), date("i")+$smsTolerence, 0, date("m"), date("d"), date("Y"));
		$callTolerenceTime = mktime(date("H"), date("i")+$callTolerence, 0, date("m"), date("d"), date("Y"));
		$query = 'SELECT n FROM AcmeTaskBundle:Notification n WHERE n.datetime <= :smsTolerenceTime AND n.datetime > :callTolerenceTime AND n.push = 1 AND n.pushConfirm = 0 ORDER BY n.datetime';
		
		try{
			return $this->getEntityManager()
				->createQuery($query)
				->setParameter('smsTolerenceTime', $smsTolerenceTime)
				->setParameter('callTolerenceTime', $callTolerenceTime)
				->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
        return null;
    	}
	}
	public function findByPendingCallNotifications() {
		//tollerence time between sms and call
		$callTolerence = 10;
		$callTolerenceTime = mktime(date("H"), date("i")+$callTolerence, 0, date("m"), date("d"), date("Y"));
		$query = 'SELECT n FROM AcmeTaskBundle:Notification n WHERE n.datetime <= :callTolerenceTime AND n.push = 1 AND n.pushConfirm = 0 AND n.sms = 0 AND n.voicecall = 0  ORDER BY n.datetime';
		
		try{
			return $this->getEntityManager()
				->createQuery($query)
				->setParameter('callTolerenceTime', $callTolerenceTime)
				->getResult();
		} catch (\Doctrine\ORM\NoResultException $e) {
        return null;
    	}
	}
	public function findByThisMonth($user,$year,$month) {
		//get no repeat
		$thisMonth = mktime(0, 0, 0, $month, 1, $year);
		$nextMonth = mktime(0, 0, 0, ($month+1), 1, $year);
		$query = '
			SELECT n
			FROM AcmeTaskBundle:Notification n, AcmeTaskBundle:Task t
				WHERE (n.datetime > :thisMonth AND n.datetime < :nextMonth)
					AND t.userId = :userId
					AND n.taskId = t.id';
		/*$query = 'SELECT t FROM AcmeTaskBundle:Notification n , AcmeTaskBundle:Task t
						WHERE 
							(n.datetime > :thisMonth AND n.datetime < :nextMonth)
							';*/
		$month = $this->getEntityManager()
			->createQuery($query)
			->setParameter('thisMonth', $thisMonth)
			->setParameter('nextMonth', $nextMonth)
			->setParameter('userId', $user->getId())
			->getResult();
		//
		return $month;
	}
}